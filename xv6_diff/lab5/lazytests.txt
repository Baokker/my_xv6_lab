diff --git a/.gitignore b/.gitignore
index fa6aa9b..a32b577 100644
--- a/.gitignore
+++ b/.gitignore
@@ -22,3 +22,5 @@ xv6.out*
 submissions/
 ph
 barrier
+
+.vscode/
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 351a5ce..2c35ae3 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -46,12 +46,18 @@ sys_sbrk(void)
 
   if(argint(0, &n) < 0)
     return -1;
-  addr = myproc()->sz;
-  // if(growproc(n) < 0)
-  //   return -1;
-  // return addr;
+  
+  struct proc *p = myproc();
+  addr = p->sz;
+
+  if (n >= 0 && addr + n >= addr)
+    p->sz += n;
+  else if (n < 0 && addr + n >= PGROUNDUP(p->trapframe->sp)) {
+    p->sz = uvmdealloc(p->pagetable, p->sz, p->sz + n);
+  }
+  else 
+    return -1;
 
-  myproc()->sz += n;
   return addr;
 }
 
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..8b67956 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,9 +65,31 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } 
+  else if (r_scause() == 13 || r_scause() == 15){
+    uint64 fault_va = r_stval();
+    if (PGROUNDDOWN(p->trapframe->sp) >= fault_va || fault_va >= p->sz){
+      p->killed = 1;
+    } 
+    else {
+      char* pa = kalloc();
+      if (pa != 0){
+        memset(pa, 0, PGSIZE);
+        if (mappages(p->pagetable, PGROUNDDOWN(fault_va), PGSIZE, (uint64)pa, PTE_R | PTE_W | PTE_U) != 0){
+          printf("haha\n");
+          kfree(pa);
+          p->killed = 1;
+        }
+      }
+      else {
+        printf("kalloc == 0\n");
+        p->killed = 1;
+      }
+    }
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  }
+  else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..1107d66 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -6,6 +6,9 @@
 #include "defs.h"
 #include "fs.h"
 
+#include "spinlock.h"
+#include "proc.h"
+
 /*
  * the kernel's page table.
  */
@@ -101,10 +104,23 @@ walkaddr(pagetable_t pagetable, uint64 va)
     return 0;
 
   pte = walk(pagetable, va, 0);
-  if(pte == 0)
-    return 0;
-  if((*pte & PTE_V) == 0)
-    return 0;
+  if (pte == 0 || (*pte & PTE_V) == 0){
+    struct proc *p = myproc();
+    if (va >= p->sz || va <= PGROUNDDOWN(p->trapframe->sp))
+      return 0;
+
+    char *pa = kalloc();
+    if (pa == 0)
+      return 0;
+    else {
+      memset(pa, 0, PGSIZE);
+      if (mappages(p->pagetable, PGROUNDDOWN(va), PGSIZE, (uint64)pa, PTE_W | PTE_R | PTE_U) != 0){
+        kfree(pa);
+        return 0;
+      }
+    }
+  }
+
   if((*pte & PTE_U) == 0)
     return 0;
   pa = PTE2PA(*pte);
@@ -181,9 +197,11 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
 
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
-      panic("uvmunmap: walk");
+      // panic("uvmunmap: walk");
+      continue;
     if((*pte & PTE_V) == 0)
-      panic("uvmunmap: not mapped");
+      // panic("uvmunmap: not mapped");
+      continue;
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
     if(do_free){
@@ -315,9 +333,11 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
-      panic("uvmcopy: pte should exist");
+      // panic("uvmcopy: pte should exist");
+      continue;
     if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+      // panic("uvmcopy: page not present");
+      continue;
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
