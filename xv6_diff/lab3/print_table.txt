diff --git a/kernel/defs.h b/kernel/defs.h
index a73b4f7..e74b9fc 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -178,6 +178,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+// add vmprint
+void            vmprint(pagetable_t pagetable);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index 0e8762f..841bb64 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -116,6 +116,9 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  // add vmprint
+  if(p->pid==1) vmprint(p->pagetable);
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/vm.c b/kernel/vm.c
index bccb405..764a8ca 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -440,3 +440,33 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+// simulate freewalk to print vm
+void printwalk(pagetable_t pagetable, int depth)
+{
+  // there are 2^9 = 512 PTEs in a page table.
+  for(int i = 0; i < 512; i++){
+    pte_t pte = pagetable[i];
+    if(pte & PTE_V){
+      for (int j = 0;j < depth;j++){
+        printf("..");
+        if (j != depth - 1)
+          printf(" ");
+      }
+      // this PTE points to a lower-level page table.
+      // type cast
+      uint64 child = PTE2PA(pte);
+      printf("%d: pte %p pa %p\n", i, pte, child);
+
+      if ((pte & (PTE_R|PTE_W|PTE_X)) == 0){
+        printwalk((pagetable_t)child, depth + 1);
+      }
+    }
+  }
+}
+
+void vmprint(pagetable_t pagetable){
+  printf("page table %p\n", pagetable);
+  printwalk(pagetable, 1);
+}
+
